void fillMatrixWithRandomNums(int matrix[3][3])
{
    short c = 0;
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            c++;
            matrix[i][j] = tes::randomNum(1, 50);   
        }
    }
}

void printMatrix(int matrix[3][3])
{   
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            printf(" %0*d\t", 1, matrix[i][j]);
        }
        cout << endl;
    }
}

bool isNumInMatrix(int matrix[3][3], int num)
{
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            if (matrix[i][j] == num)
                return true;
        }
    }
    return false;
}

void printIntersectedNumsInMatrices(int matrix1[3][3], int matrix2[3][3])
{
    cout << "\nIntersected numbers are:\n";
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            if (isNumInMatrix(matrix2, matrix1[i][j]))
                cout << matrix1[i][j] << "  ";
        }
    }
}

int main()
{ 
    srand((unsigned)time(NULL));

    int matrix1[3][3], matrix2[3][3];
    fillMatrixWithRandomNums(matrix1);
    cout << "Matrix1:\n";
    printMatrix(matrix1);

    fillMatrixWithRandomNums(matrix2);
    cout << "Matrix2:\n";
    printMatrix(matrix2);
    
    printIntersectedNumsInMatrices(matrix1, matrix2);
  
    return 0;
}